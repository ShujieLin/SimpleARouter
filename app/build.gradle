plugins {
    id 'com.android.application'
}
//缓存，提高编译速度
def app_android = this.getRootProject().ext.app_android
def app_dependencies = this.getRootProject().ext.app_dependencies

android {
    compileSdkVersion app_android.compileSdkVersion
    buildToolsVersion app_android.buildToolsVersion

    defaultConfig {
        applicationId app_android.applicationId
        minSdkVersion app_android.minSdkVersion
        targetSdkVersion app_android.targetSdkVersion
        versionCode app_android.versionCode
        versionName app_android.versionName

        testInstrumentationRunner app_android.testInstrumentationRunner

        buildConfigField("boolean","isRelease",String.valueOf(isRelease))

        // 传递参数
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName : project.getName(),packageNameForAPT : packageNameForAPT]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    app_dependencies.each{k,v ->
        implementation v
    }

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //注解处理器
    annotationProcessor project(":compiler")
    //arouter：
    //用于注解
    implementation project(":arouter-annotations")

    //公共基础库
    implementation project(":common")

    //正式环境下，模块不能独立运行
    if (isRelease){
        implementation project(":module_first")
        implementation project(":module_second")
    }
}